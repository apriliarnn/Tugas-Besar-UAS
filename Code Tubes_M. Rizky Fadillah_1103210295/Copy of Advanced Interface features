{"cells":[{"cell_type":"markdown","metadata":{"id":"KBNzxjt5nVTJ"},"source":["# Advanced Interface features"]},{"cell_type":"markdown","metadata":{"id":"sC16gL41nVTL"},"source":["Install the Transformers, Datasets, and Evaluate libraries to run this notebook."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wur72SLInVTL"},"outputs":[],"source":["!pip install datasets evaluate transformers[sentencepiece]"]},{"cell_type":"markdown","source":["Kode ini menginstal library yang diperlukan untuk pengembangan proyek NLP, termasuk datasets untuk memuat dan mengelola dataset, evaluate untuk mengevaluasi kinerja model, dan transformers[sentencepiece] untuk bekerja dengan model-model canggih dari Hugging Face yang menggunakan SentencePiece tokenizer, sehingga memudahkan implementasi dan eksperimen dengan berbagai model bahasa alami."],"metadata":{"id":"2JGAIy_fnYJM"}},{"cell_type":"code","source":["!pip install gradio"],"metadata":{"id":"VNHj_K9xnW02"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Kode ini menginstal Gradio, sebuah library Python yang memungkinkan pengguna untuk dengan mudah membuat antarmuka web interaktif untuk model machine learning, termasuk model NLP, sehingga memudahkan dalam demo, eksperimen, dan berbagi model dengan orang lain secara cepat dan intuitif."],"metadata":{"id":"3Mx8hgBvnYqA"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"nqBDtgM6nVTM"},"outputs":[],"source":["import random\n","\n","import gradio as gr\n","\n","\n","def chat(message, history):\n","    history = history or []\n","    if message.startswith(\"How many\"):\n","        response = random.randint(1, 10)\n","    elif message.startswith(\"How\"):\n","        response = random.choice([\"Great\", \"Good\", \"Okay\", \"Bad\"])\n","    elif message.startswith(\"Where\"):\n","        response = random.choice([\"Here\", \"There\", \"Somewhere\"])\n","    else:\n","        response = \"I don't know\"\n","    history.append((message, response))\n","    return history, history\n","\n","\n","iface = gr.Interface(\n","    chat,\n","    [\"text\", \"state\"],\n","    [\"chatbot\", \"state\"],\n","    allow_screenshot=False,\n","    allow_flagging=\"never\",\n",")\n","iface.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ruf7_sirnVTM"},"outputs":[],"source":["import requests\n","import tensorflow as tf\n","\n","import gradio as gr\n","\n","inception_net = tf.keras.applications.MobileNetV2()  # load the model\n","\n","# Download human-readable labels for ImageNet.\n","response = requests.get(\"https://git.io/JJkYN\")\n","labels = response.text.split(\"\\n\")\n","\n","\n","def classify_image(inp):\n","    inp = inp.reshape((-1, 224, 224, 3))\n","    inp = tf.keras.applications.mobilenet_v2.preprocess_input(inp)\n","    prediction = inception_net.predict(inp).flatten()\n","    return {labels[i]: float(prediction[i]) for i in range(1000)}\n","\n","\n","image = gr.Image(shape=(224, 224))\n","label = gr.Label(num_top_classes=3)\n","\n","title = \"Gradio Image Classifiction + Interpretation Example\"\n","gr.Interface(\n","    fn=classify_image, inputs=image, outputs=label, interpretation=\"default\", title=title\n",").launch()"]}],"metadata":{"colab":{"name":"Advanced Interface features","provenance":[{"file_id":"https://github.com/huggingface/notebooks/blob/master/course/en/chapter9/section6.ipynb","timestamp":1735999223387}]}},"nbformat":4,"nbformat_minor":0}