{"cells":[{"cell_type":"markdown","metadata":{"id":"uiQIjZarnnCO"},"source":["# Introduction to Blocks"]},{"cell_type":"markdown","metadata":{"id":"OfuHqsZMnnCR"},"source":["Install the Transformers, Datasets, and Evaluate libraries to run this notebook."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aVb_s3UYnnCR"},"outputs":[],"source":["!pip install datasets evaluate transformers[sentencepiece]"]},{"cell_type":"markdown","source":["Kode ini menginstal library yang diperlukan untuk pengembangan proyek NLP, termasuk datasets untuk memuat dan mengelola dataset, evaluate untuk mengevaluasi kinerja model, dan transformers[sentencepiece] untuk bekerja dengan model-model canggih dari Hugging Face yang menggunakan SentencePiece tokenizer, sehingga memudahkan implementasi dan eksperimen dengan berbagai model bahasa alami."],"metadata":{"id":"fQ2jvaN7np2R"}},{"cell_type":"code","source":["!pip install gradio"],"metadata":{"id":"BlAD8O8onoRx"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Kode ini menginstal Gradio, sebuah library Python yang memungkinkan pengguna untuk dengan mudah membuat antarmuka web interaktif untuk model machine learning, termasuk model NLP, sehingga memudahkan dalam demo, eksperimen, dan berbagi model dengan orang lain secara cepat dan intuitif."],"metadata":{"id":"3W6R-DTlnsq7"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"4LdOXdf6nnCS"},"outputs":[],"source":["import gradio as gr\n","\n","\n","def flip_text(x):\n","    return x[::-1]\n","\n","\n","demo = gr.Blocks()\n","\n","with demo:\n","    gr.Markdown(\n","        \"\"\"\n","    # Flip Text!\n","    Start typing below to see the output.\n","    \"\"\"\n","    )\n","    input = gr.Textbox(placeholder=\"Flip this text\")\n","    output = gr.Textbox()\n","\n","    input.change(fn=flip_text, inputs=input, outputs=output)\n","\n","demo.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aoMNp8A8nnCT"},"outputs":[],"source":["import numpy as np\n","import gradio as gr\n","\n","demo = gr.Blocks()\n","\n","\n","def flip_text(x):\n","    return x[::-1]\n","\n","\n","def flip_image(x):\n","    return np.fliplr(x)\n","\n","\n","with demo:\n","    gr.Markdown(\"Flip text or image files using this demo.\")\n","    with gr.Tabs():\n","        with gr.TabItem(\"Flip Text\"):\n","            with gr.Row():\n","                text_input = gr.Textbox()\n","                text_output = gr.Textbox()\n","            text_button = gr.Button(\"Flip\")\n","        with gr.TabItem(\"Flip Image\"):\n","            with gr.Row():\n","                image_input = gr.Image()\n","                image_output = gr.Image()\n","            image_button = gr.Button(\"Flip\")\n","\n","    text_button.click(flip_text, inputs=text_input, outputs=text_output)\n","    image_button.click(flip_image, inputs=image_input, outputs=image_output)\n","\n","demo.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7BACeI5nnnCT"},"outputs":[],"source":["import gradio as gr\n","\n","api = gr.Interface.load(\"huggingface/EleutherAI/gpt-j-6B\")\n","\n","\n","def complete_with_gpt(text):\n","    # Use the last 50 characters of the text as context\n","    return text[:-50] + api(text[-50:])\n","\n","\n","with gr.Blocks() as demo:\n","    textbox = gr.Textbox(placeholder=\"Type here and press enter...\", lines=4)\n","    btn = gr.Button(\"Generate\")\n","\n","    btn.click(complete_with_gpt, textbox, textbox)\n","\n","demo.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZWrVES6unnCU"},"outputs":[],"source":["from transformers import pipeline\n","\n","import gradio as gr\n","\n","asr = pipeline(\"automatic-speech-recognition\", \"facebook/wav2vec2-base-960h\")\n","classifier = pipeline(\"text-classification\")\n","\n","\n","def speech_to_text(speech):\n","    text = asr(speech)[\"text\"]\n","    return text\n","\n","\n","def text_to_sentiment(text):\n","    return classifier(text)[0][\"label\"]\n","\n","\n","demo = gr.Blocks()\n","\n","with demo:\n","    audio_file = gr.Audio(type=\"filepath\")\n","    text = gr.Textbox()\n","    label = gr.Label()\n","\n","    b1 = gr.Button(\"Recognize Speech\")\n","    b2 = gr.Button(\"Classify Sentiment\")\n","\n","    b1.click(speech_to_text, inputs=audio_file, outputs=text)\n","    b2.click(text_to_sentiment, inputs=text, outputs=label)\n","\n","demo.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qnyKY5aAnnCU"},"outputs":[],"source":["import gradio as gr\n","\n","\n","def change_textbox(choice):\n","    if choice == \"short\":\n","        return gr.Textbox.update(lines=2, visible=True)\n","    elif choice == \"long\":\n","        return gr.Textbox.update(lines=8, visible=True)\n","    else:\n","        return gr.Textbox.update(visible=False)\n","\n","\n","with gr.Blocks() as block:\n","    radio = gr.Radio(\n","        [\"short\", \"long\", \"none\"], label=\"What kind of essay would you like to write?\"\n","    )\n","    text = gr.Textbox(lines=2, interactive=True)\n","\n","    radio.change(fn=change_textbox, inputs=radio, outputs=text)\n","    block.launch()"]}],"metadata":{"colab":{"name":"Introduction to Blocks","provenance":[{"file_id":"https://github.com/huggingface/notebooks/blob/master/course/en/chapter9/section7.ipynb","timestamp":1735999298549}]}},"nbformat":4,"nbformat_minor":0}